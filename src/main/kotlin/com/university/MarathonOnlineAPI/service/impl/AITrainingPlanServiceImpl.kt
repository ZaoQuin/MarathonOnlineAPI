package com.university.MarathonOnlineAPI.service.impl

import com.university.MarathonOnlineAPI.config.AITrainingProperties
import com.university.MarathonOnlineAPI.entity.*
import com.university.MarathonOnlineAPI.repos.*
import com.university.MarathonOnlineAPI.service.AITrainingPlanService
import io.github.cdimascio.dotenv.Dotenv
import okhttp3.MediaType.Companion.toMediaType
import okhttp3.OkHttpClient
import okhttp3.Request
import okhttp3.RequestBody.Companion.toRequestBody
import org.json.JSONArray
import org.json.JSONObject
import org.springframework.stereotype.Service
import java.io.IOException
import java.util.regex.Pattern

@Service
class AITrainingPlanServiceImpl(
    private val trainingSessionRepository: TrainingSessionRepository,
    private val trainingDayRepository: TrainingDayRepository,
    private val userRepository: UserRepository,
    private val aiTrainingProperties: AITrainingProperties
): AITrainingPlanService {
    val apiKey = aiTrainingProperties.api
    private val GROQ_MODEL = "llama3-70b-8192"

    override fun generateTrainingDays(input: TrainingPlanInput, plan: TrainingPlan): List<TrainingDay> {
        // T·∫°o prompt cho AI d·ª±a tr√™n th√¥ng tin ƒë·∫ßu v√†o
        val prompt = createPromptForAI(input)

        // G·ªçi API AI ƒë·ªÉ t·∫°o l·ªãch tr√¨nh
        val aiResponse = callAIApi(prompt)

        // X·ª≠ l√Ω ph·∫£n h·ªìi t·ª´ AI v√† t·∫°o c√°c ng√†y luy·ªán t·∫≠p, bao g·ªìm c√°c ng√†y ngh·ªâ
        val trainingDays = parseAIResponse(aiResponse, plan)

        // L∆∞u t·∫•t c·∫£ training days
        return trainingDayRepository.saveAll(trainingDays)
    }

    private fun createPromptForAI(input: TrainingPlanInput): String {
        return """
        H√£y t·∫°o m·ªôt l·ªãch tr√¨nh luy·ªán t·∫≠p marathon chi ti·∫øt d∆∞·ªõi d·∫°ng JSON d·ª±a tr√™n th√¥ng tin c·ªßa runner sau:

        ‚Ä¢ Tr√¨nh ƒë·ªô: ${input.level}
        ‚Ä¢ M·ª•c ti√™u: ${input.goal}
        ‚Ä¢ Kho·∫£ng c√°ch d√†i nh·∫•t t·ª´ng ch·∫°y: ${input.maxDistance} km
        ‚Ä¢ T·ªëc ƒë·ªô trung b√¨nh: ${input.averagePace} ph√∫t/km
        ‚Ä¢ T·ªïng s·ªë tu·∫ßn luy·ªán t·∫≠p: 4
        ‚Ä¢ S·ªë bu·ªïi t·∫≠p m·ªói tu·∫ßn: ${input.daysPerWeek}

        ‚ú≥Ô∏è **Y√äU C·∫¶U ƒê·∫¶U RA**:
        Tr·∫£ v·ªÅ m·ªôt **m·∫£ng JSON h·ª£p l·ªá**, KH√îNG th√™m vƒÉn b·∫£n gi·∫£i th√≠ch. M·ªói ph·∫ßn t·ª≠ trong m·∫£ng t∆∞∆°ng ·ª©ng v·ªõi m·ªôt ng√†y t·∫≠p luy·ªán th·ª±c s·ª± trong l·ªãch tr√¨nh (kh√¥ng bao g·ªìm c√°c ng√†y ngh·ªâ), v·ªõi c√°c tr∆∞·ªùng l√† b·∫Øt bu·ªôc, c√≥ ƒë·ªãnh d·∫°ng:

        {
          "week": [s·ªë tu·∫ßn, t·ª´ 1 ƒë·∫øn 4],
          "dayOfWeek": [ng√†y trong tu·∫ßn, t·ª´ 1 (Th·ª© Hai) ƒë·∫øn 7 (Ch·ªß Nh·∫≠t)],
          "session": {
            "name": "[t√™n bu·ªïi t·∫≠p]",
            "type": "[LONG_RUN | RECOVERY_RUN | SPEED_WORK]",
            "distance": [s·ªë km, s·ªë th·∫≠p ph√¢n],
            "pace": [ph√∫t/km, s·ªë th·∫≠p ph√¢n],
            "notes": "Nh·∫Øc nh·ªü ng·∫Øn t√πy thu·ªôc lo·∫°i h√¨nh t·∫≠p luy·ªán, v√≠ d·ª•: 'Gi·ªØ pace ·ªïn ƒë·ªãnh to√†n bu·ªïi', "
          }
        }

        üìå **Quan tr·ªçng**:
        ‚Ä¢ Ch·ªâ t·∫°o c√°c m·ª•c cho c√°c ng√†y t·∫≠p luy·ªán th·ª±c s·ª± (${input.daysPerWeek} ng√†y m·ªói tu·∫ßn), kh√¥ng c·∫ßn bao g·ªìm c√°c ng√†y ngh·ªâ.
        ‚Ä¢ H·ªá th·ªëng s·∫Ω t·ª± ƒë·ªông x·ª≠ l√Ω c√°c ng√†y ngh·ªâ ng∆°i (REST).
        ‚Ä¢ M·ªói tu·∫ßn n√™n c√≥ ${input.daysPerWeek} ph·∫ßn t·ª≠.

        üß† **Nguy√™n t·∫Øc x√¢y d·ª±ng k·∫ø ho·∫°ch**:
        1. LONG_RUN tƒÉng d·∫ßn qua t·ª´ng tu·∫ßn, b·∫Øt ƒë·∫ßu t·ª´ ${(input.maxDistance ?: 10.0).coerceAtLeast(5.0)} km.
        2. SPEED_WORK c·∫ßn ƒëa d·∫°ng (fartlek, interval, tempo, hill repeats).
        3. RECOVERY_RUN n√™n ch·∫≠m h∆°n pace trung b√¨nh 1‚Äì2 ph√∫t/km.
        4. Tr√°nh x·∫øp `"LONG_RUN"` v√† `"SPEED_WORK"` v√†o hai ng√†y li√™n ti·∫øp.
        5. Ph√¢n b·ªï c√°c bu·ªïi t·∫≠p h·ª£p l√Ω trong tu·∫ßn v√† tr√°nh d·ªìn t·∫≠p v√†o c√°c ng√†y li√™n ti·∫øp.
        6. S·ª≠ d·ª•ng ti·∫øng Vi·ªát.

        üìä **S·ªë ph·∫ßn t·ª≠ trong m·∫£ng ƒë·∫ßu ra**: ${input.daysPerWeek!! * 4} ph·∫ßn t·ª≠ (${input.daysPerWeek} ng√†y/tu·∫ßn √ó 4 tu·∫ßn).

        üëâ Nh·∫Øc l·∫°i: **Ch·ªâ tr·∫£ v·ªÅ m·∫£ng JSON h·ª£p l·ªá cho c√°c ng√†y t·∫≠p luy·ªán th·ª±c s·ª±. Kh√¥ng th√™m vƒÉn b·∫£n m√¥ t·∫£ n√†o kh√°c**.
    """.trimIndent()
    }

    private fun callAIApi(prompt: String): String {
        val client = OkHttpClient()

        val messageObj = JSONObject()
            .put("role", "user")
            .put("content", prompt)

        val jsonBody = JSONObject()
            .put("model", GROQ_MODEL)
            .put("messages", JSONArray().put(messageObj))
            .put("temperature", 0.7)

        val request = Request.Builder()
            .url("https://api.groq.com/openai/v1/chat/completions")
            .addHeader("Content-Type", "application/json")
            .addHeader("Authorization", "Bearer $apiKey")
            .post(jsonBody.toString().toRequestBody("application/json".toMediaType()))
            .build()

        client.newCall(request).execute().use { response ->
            if (!response.isSuccessful) throw IOException("Unexpected code $response")

            val responseBody = response.body?.string() ?: ""
            val jsonResponse = JSONObject(responseBody)
            return jsonResponse.getJSONArray("choices")
                .getJSONObject(0)
                .getJSONObject("message")
                .getString("content")
        }
    }

    private fun parseAIResponse(aiResponse: String, plan: TrainingPlan): List<TrainingDay> {
        val trainingDays = mutableListOf<TrainingDay>()
        val trainingMap = mutableMapOf<Pair<Int, Int>, TrainingDay>() // Map of (week, dayOfWeek) to TrainingDay

        try {
            // T√¨m v√† tr√≠ch xu·∫•t ph·∫ßn JSON t·ª´ ph·∫£n h·ªìi
            val jsonPattern = Pattern.compile("\\[\\s*\\{.*\\}\\s*\\]", Pattern.DOTALL)
            val matcher = jsonPattern.matcher(aiResponse)

            if (matcher.find()) {
                val jsonArray = JSONArray(matcher.group())

                // X·ª≠ l√Ω c√°c ng√†y t·∫≠p luy·ªán do AI t·∫°o ra
                for (i in 0 until jsonArray.length()) {
                    val dayJson = jsonArray.getJSONObject(i)
                    val sessionJson = dayJson.getJSONObject("session")
                    val week = dayJson.getInt("week")
                    val dayOfWeek = dayJson.getInt("dayOfWeek")

                    // T·∫°o session cho ng√†y t·∫≠p luy·ªán
                    val session = TrainingSession(
                        name = sessionJson.getString("name"),
                        type = ETrainingSessionType.valueOf(sessionJson.getString("type")),
                        distance = sessionJson.getDouble("distance"),
                        pace = sessionJson.getDouble("pace"),
                        notes = if (sessionJson.has("notes")) sessionJson.getString("notes") else null
                    )

                    val savedSession = trainingSessionRepository.save(session)

                    // T·∫°o training day
                    val trainingDay = TrainingDay().apply {
                        this.plan = plan
                        this.session = savedSession
                        this.week = week
                        this.dayOfWeek = dayOfWeek
                    }

                    trainingMap[Pair(week, dayOfWeek)] = trainingDay
                }

                // T·∫°o ƒë·∫ßy ƒë·ªß c√°c ng√†y cho to√†n b·ªô l·ªãch tr√¨nh (4 tu·∫ßn x 7 ng√†y)
                for (week in 1..4) {
                    for (dayOfWeek in 1..7) {
                        val key = Pair(week, dayOfWeek)

                        // N·∫øu ng√†y n√†y kh√¥ng ph·∫£i l√† ng√†y t·∫≠p ƒë∆∞·ª£c gen b·ªüi AI, t·∫°o ng√†y ngh·ªâ
                        if (!trainingMap.containsKey(key)) {
                            // T·∫°o session ngh·ªâ ng∆°i
                            val restSession = TrainingSession(
                                name = "Ngh·ªâ ng∆°i",
                                type = ETrainingSessionType.REST,
                                distance = 0.0,
                                pace = 0.0,
                                notes = "Ng√†y ngh·ªâ ph·ª•c h·ªìi"
                            )

                            val savedRestSession = trainingSessionRepository.save(restSession)

                            // T·∫°o training day ngh·ªâ ng∆°i
                            val restDay = TrainingDay().apply {
                                this.plan = plan
                                this.session = savedRestSession
                                this.week = week
                                this.dayOfWeek = dayOfWeek
                            }

                            trainingMap[key] = restDay
                        }
                    }
                }

                // Chuy·ªÉn t·∫•t c·∫£ c√°c ng√†y t·ª´ map v√†o danh s√°ch cu·ªëi c√πng
                trainingDays.addAll(trainingMap.values)
            } else {
                // N·∫øu kh√¥ng t√¨m th·∫•y JSON, t·∫°o l·ªãch tr√¨nh m·∫∑c ƒë·ªãnh
                trainingDays.addAll(createDefaultTrainingPlan(plan))
            }
        } catch (e: Exception) {
            // Log l·ªói v√† t·∫°o l·ªãch tr√¨nh m·∫∑c ƒë·ªãnh
            println("Error parsing AI response: ${e.message}")
            e.printStackTrace()
            trainingDays.addAll(createDefaultTrainingPlan(plan))
        }

        return trainingDays
    }

    private fun createDefaultTrainingPlan(plan: TrainingPlan): List<TrainingDay> {
        val trainingDays = mutableListOf<TrainingDay>()
        val weeks = 4
        val daysPerWeek = plan.input.daysPerWeek ?: 4
        val maxDistance = plan.input.maxDistance ?: 10.0
        val avgPace = plan.input.averagePace ?: 6.0

        // Ch·ªçn c√°c ng√†y t·∫≠p luy·ªán t·ªët nh·∫•t trong tu·∫ßn d·ª±a tr√™n s·ªë ng√†y t·∫≠p
        val trainingDaysOfWeek = when (daysPerWeek) {
            3 -> listOf(2, 4, 7) // Th·ª© 3, 5, CN
            4 -> listOf(2, 4, 6, 7) // Th·ª© 3, 5, 7, CN
            5 -> listOf(2, 3, 5, 6, 7) // Th·ª© 3, 4, 6, 7, CN
            6 -> listOf(1, 2, 4, 5, 6, 7) // Th·ª© 2, 3, 5, 6, 7, CN
            7 -> (1..7).toList() // C·∫£ tu·∫ßn
            else -> listOf(2, 4, 7) // M·∫∑c ƒë·ªãnh 3 ng√†y: Th·ª© 3, 5, CN
        }

        for (week in 1..weeks) {
            for (day in 1..7) {
                // X√°c ƒë·ªãnh session type d·ª±a v√†o ng√†y trong tu·∫ßn
                val sessionType = if (day in trainingDaysOfWeek) {
                    when {
                        day == 7 -> ETrainingSessionType.LONG_RUN // Ch·ªß nh·∫≠t lu√¥n l√† ng√†y ch·∫°y d√†i
                        day == 2 || day == 5 -> ETrainingSessionType.SPEED_WORK // Th·ª© 3, 6 t·∫≠p t·ªëc ƒë·ªô
                        else -> ETrainingSessionType.RECOVERY_RUN // C√°c ng√†y c√≤n l·∫°i l√† h·ªìi ph·ª•c
                    }
                } else {
                    ETrainingSessionType.REST // Ng√†y kh√¥ng trong l·ªãch t·∫≠p l√† ng√†y ngh·ªâ
                }

                // ƒêi·ªÅu ch·ªânh th√¥ng s·ªë bu·ªïi t·∫≠p d·ª±a v√†o lo·∫°i session v√† tu·∫ßn luy·ªán t·∫≠p
                val distance = when (sessionType) {
                    ETrainingSessionType.LONG_RUN -> {
                        val baseDistance = maxDistance.coerceAtLeast(5.0)
                        when (week) {
                            1 -> baseDistance
                            2 -> baseDistance * 1.2
                            3 -> baseDistance * 1.5
                            4 -> if (plan.input.goal == ETrainingPlanInputGoal.MARATHON_FINISH ||
                                plan.input.goal == ETrainingPlanInputGoal.MARATHON_TIME) 42.195 else baseDistance * 1.7
                            else -> baseDistance
                        }
                    }
                    ETrainingSessionType.SPEED_WORK -> 5.0 + (week * 0.5).coerceAtMost(2.0)
                    ETrainingSessionType.RECOVERY_RUN -> 3.0 + (week * 0.5).coerceAtMost(2.0)
                    else -> 0.0
                }

                val pace = when (sessionType) {
                    ETrainingSessionType.LONG_RUN -> avgPace + 0.5 // Ch·∫°y d√†i th√¨ ch·∫≠m h∆°n m·ªôt ch√∫t
                    ETrainingSessionType.SPEED_WORK -> (avgPace - 0.5).coerceAtLeast(4.0) // T·ªëc ƒë·ªô nhanh h∆°n
                    ETrainingSessionType.RECOVERY_RUN -> avgPace + 1.5 // Ch·∫°y h·ªìi ph·ª•c ch·∫≠m h∆°n nhi·ªÅu
                    else -> 0.0
                }

                // T·∫°o session name v√† notes phong ph√∫ h∆°n
                val (sessionName, sessionNotes) = when (sessionType) {
                    ETrainingSessionType.LONG_RUN -> {
                        val name = "Ch·∫°y d√†i tu·∫ßn $week"
                        val notes = "Gi·ªØ nh·ªãp ƒë·ªÅu, t·∫≠p trung v√†o s·ª©c b·ªÅn v√† c·∫£m gi√°c tho·∫£i m√°i"
                        Pair(name, notes)
                    }
                    ETrainingSessionType.SPEED_WORK -> {
                        val speedWorkTypes = listOf(
                            "Interval" to "Ch·∫°y nhanh 400m, ngh·ªâ 200m, l·∫∑p l·∫°i 6-8 l·∫ßn",
                            "Tempo" to "Duy tr√¨ pace nhanh trong 15-20 ph√∫t li√™n t·ª•c",
                            "Fartlek" to "Xen k·∫Ω t·ªëc ƒë·ªô nhanh-ch·∫≠m t√πy c·∫£m gi√°c",
                            "Hill Repeats" to "T√¨m d·ªëc 100-200m, ch·∫°y l√™n d·ªëc r·ªìi ƒëi b·ªô xu·ªëng"
                        )
                        val (type, note) = speedWorkTypes[(week - 1) % speedWorkTypes.size]
                        Pair("$type tu·∫ßn $week", note)
                    }
                    ETrainingSessionType.RECOVERY_RUN -> {
                        val name = "Ch·∫°y h·ªìi ph·ª•c tu·∫ßn $week"
                        val notes = "Ch·∫°y ch·∫≠m tho·∫£i m√°i, t·∫≠p trung ph·ª•c h·ªìi c∆° b·∫Øp"
                        Pair(name, notes)
                    }
                    else -> Pair("Ngh·ªâ ng∆°i", "Th∆∞ gi√£n v√† ph·ª•c h·ªìi, c√≥ th·ªÉ t·∫≠p nh·∫π c√°c ƒë·ªông t√°c k√©o gi√£n")
                }

                // T·∫°o session
                val session = TrainingSession(
                    name = sessionName,
                    type = sessionType,
                    distance = distance.round(2),
                    pace = pace.round(2),
                    notes = sessionNotes
                )

                val savedSession = trainingSessionRepository.save(session)

                // T·∫°o training day
                val trainingDay = TrainingDay().apply {
                    this.plan = plan
                    this.session = savedSession
                    this.week = week
                    this.dayOfWeek = day
                }

                trainingDays.add(trainingDay)
            }
        }

        return trainingDays
    }

    // Extension function ƒë·ªÉ l√†m tr√≤n s·ªë th·∫≠p ph√¢n
    private fun Double.round(decimals: Int): Double {
        var multiplier = 1.0
        repeat(decimals) { multiplier *= 10 }
        return kotlin.math.round(this * multiplier) / multiplier
    }
}